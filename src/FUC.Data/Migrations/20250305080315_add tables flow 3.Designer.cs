// <auto-generated />
using System;
using FUC.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FUC.Data.Migrations
{
    [DbContext(typeof(FucDbContext))]
    [Migration("20250305080315_add tables flow 3")]
    partial class addtablesflow3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FUC.Common.IntegrationEventLog.IntegrationEventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IntegrationEventLogs", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.BusinessArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("07bc7cb0-df0d-4cb7-8d27-6881ee29932e"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BusinessArea", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.Campus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Campus", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.Capstone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MajorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxMember")
                        .HasColumnType("integer");

                    b.Property<int>("MinMember")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.ToTable("Capstone", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.CoSupervisor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("35ac8021-ee1d-4c4b-a833-6565ba505c82"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SupervisorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TopicId");

                    b.ToTable("CoSupervisor", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("f371ba63-3dc2-416d-aca2-33f3d4f8a911"));

                    b.Property<string>("CampusId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CapstoneId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MajorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SemesterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<string>("TopicCode")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("CapstoneId");

                    b.HasIndex("MajorId");

                    b.HasIndex("SemesterId");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("a2e55a07-3b59-4a80-b080-2a99452c9b17"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("UnderReview");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupMember", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.Major", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MajorGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MajorGroupId");

                    b.ToTable("Major", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.MajorGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("MajorGroup", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.Semester", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxGroupsPerSupervisor")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Semester", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Guid?>("BusinessAreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("CampusId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CapstoneId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEligible")
                        .HasColumnType("boolean");

                    b.Property<string>("MajorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Mark")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("InProgress");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusinessAreaId");

                    b.HasIndex("CampusId");

                    b.HasIndex("CapstoneId");

                    b.HasIndex("MajorId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.Supervisor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CampusId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MajorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxGroupsInSemester")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("MajorId");

                    b.ToTable("Supervisor", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.SupervisorGroupAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("f596ce5b-0dfd-4fb7-bdf0-da5898b24b71"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Supervisor2Id")
                        .HasColumnType("text");

                    b.Property<string>("SupervisorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Supervisor2Id");

                    b.HasIndex("SupervisorId");

                    b.ToTable("SupervisorGroupAssignment", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.TemplateDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d77b5d43-ee03-405d-961b-c20329229ecc"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFile")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TemplateDocument", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("1ac63826-2126-4f6d-86ab-7867e1efe4cb"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BusinessAreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("CampusId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CapstoneId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAssignedToGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MainSupervisorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SemesterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VietnameseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessAreaId");

                    b.HasIndex("CampusId");

                    b.HasIndex("CapstoneId");

                    b.HasIndex("MainSupervisorId");

                    b.HasIndex("SemesterId");

                    b.ToTable("Topic", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.TopicAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("62cbab6a-16b4-4a65-8b41-f90afdeb9be0"));

                    b.Property<string>("AnalysisResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 3, 5, 8, 3, 14, 694, DateTimeKind.Utc).AddTicks(2692));

                    b.Property<string>("ProcessedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicAnalysis", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.TopicAppraisal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("73495ea7-d2f5-4668-99c4-631ec08e71ab"));

                    b.Property<string>("AppraisalComment")
                        .HasColumnType("text");

                    b.Property<string>("AppraisalContent")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AppraisalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<string>("SupervisorId")
                        .HasColumnType("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicAppraisal", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.TopicRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("50be2d60-3ef7-4089-bfd5-67dddeb32e04"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("UnderReview");

                    b.Property<string>("SupervisorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicRequest", (string)null);
                });

            modelBuilder.Entity("FUC.Data.Entities.Capstone", b =>
                {
                    b.HasOne("FUC.Data.Entities.Major", "Major")
                        .WithMany("Capstones")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Major");
                });

            modelBuilder.Entity("FUC.Data.Entities.CoSupervisor", b =>
                {
                    b.HasOne("FUC.Data.Entities.Supervisor", "Supervisor")
                        .WithMany("CoSupervisors")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Topic", "Topic")
                        .WithMany("CoSupervisors")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supervisor");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FUC.Data.Entities.Group", b =>
                {
                    b.HasOne("FUC.Data.Entities.Campus", "Campus")
                        .WithMany("Groups")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Capstone", "Capstone")
                        .WithMany("Groups")
                        .HasForeignKey("CapstoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Major", "Major")
                        .WithMany("Groups")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Semester", "Semester")
                        .WithMany("Groups")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Capstone");

                    b.Navigation("Major");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("FUC.Data.Entities.GroupMember", b =>
                {
                    b.HasOne("FUC.Data.Entities.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Student", "Student")
                        .WithMany("GroupMembers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FUC.Data.Entities.Major", b =>
                {
                    b.HasOne("FUC.Data.Entities.MajorGroup", "MajorGroup")
                        .WithMany("Majors")
                        .HasForeignKey("MajorGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MajorGroup");
                });

            modelBuilder.Entity("FUC.Data.Entities.Student", b =>
                {
                    b.HasOne("FUC.Data.Entities.BusinessArea", "BusinessArea")
                        .WithMany("Students")
                        .HasForeignKey("BusinessAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FUC.Data.Entities.Campus", "Campus")
                        .WithMany("Students")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Capstone", "Capstone")
                        .WithMany("Students")
                        .HasForeignKey("CapstoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Major", "Major")
                        .WithMany("Students")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessArea");

                    b.Navigation("Campus");

                    b.Navigation("Capstone");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("FUC.Data.Entities.Supervisor", b =>
                {
                    b.HasOne("FUC.Data.Entities.Campus", "Campus")
                        .WithMany("Supervisors")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Major", "Major")
                        .WithMany("Supervisors")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("FUC.Data.Entities.SupervisorGroupAssignment", b =>
                {
                    b.HasOne("FUC.Data.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Supervisor", "Supervisor2")
                        .WithMany()
                        .HasForeignKey("Supervisor2Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FUC.Data.Entities.Supervisor", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Supervisor");

                    b.Navigation("Supervisor2");
                });

            modelBuilder.Entity("FUC.Data.Entities.Topic", b =>
                {
                    b.HasOne("FUC.Data.Entities.BusinessArea", "BusinessArea")
                        .WithMany("Topics")
                        .HasForeignKey("BusinessAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Campus", "Campus")
                        .WithMany("Topics")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Capstone", "Capstone")
                        .WithMany("Topics")
                        .HasForeignKey("CapstoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Supervisor", "MainSupervisor")
                        .WithMany("Topics")
                        .HasForeignKey("MainSupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Semester", "Semester")
                        .WithMany("Topics")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessArea");

                    b.Navigation("Campus");

                    b.Navigation("Capstone");

                    b.Navigation("MainSupervisor");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("FUC.Data.Entities.TopicAnalysis", b =>
                {
                    b.HasOne("FUC.Data.Entities.Topic", "Topic")
                        .WithMany("TopicAnalyses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FUC.Data.Entities.TopicAppraisal", b =>
                {
                    b.HasOne("FUC.Data.Entities.Supervisor", "Supervisor")
                        .WithMany("TopicAppraisals")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FUC.Data.Entities.Topic", "Topic")
                        .WithMany("TopicAppraisals")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supervisor");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FUC.Data.Entities.TopicRequest", b =>
                {
                    b.HasOne("FUC.Data.Entities.Group", "Group")
                        .WithMany("TopicRequests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Supervisor", "Supervisor")
                        .WithMany("TopicRequests")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FUC.Data.Entities.Topic", "Topic")
                        .WithMany("TopicRequests")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Supervisor");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("FUC.Data.Entities.BusinessArea", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("FUC.Data.Entities.Campus", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Students");

                    b.Navigation("Supervisors");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("FUC.Data.Entities.Capstone", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Students");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("FUC.Data.Entities.Group", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("TopicRequests");
                });

            modelBuilder.Entity("FUC.Data.Entities.Major", b =>
                {
                    b.Navigation("Capstones");

                    b.Navigation("Groups");

                    b.Navigation("Students");

                    b.Navigation("Supervisors");
                });

            modelBuilder.Entity("FUC.Data.Entities.MajorGroup", b =>
                {
                    b.Navigation("Majors");
                });

            modelBuilder.Entity("FUC.Data.Entities.Semester", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("FUC.Data.Entities.Student", b =>
                {
                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("FUC.Data.Entities.Supervisor", b =>
                {
                    b.Navigation("CoSupervisors");

                    b.Navigation("TopicAppraisals");

                    b.Navigation("TopicRequests");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("FUC.Data.Entities.Topic", b =>
                {
                    b.Navigation("CoSupervisors");

                    b.Navigation("TopicAnalyses");

                    b.Navigation("TopicAppraisals");

                    b.Navigation("TopicRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
